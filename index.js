const sql = require( "mssql" )
const axios = require( "axios" )
const fs = require( 'fs' )
const parseString = require('xml2js').parseString;

const main = async () => {

	/**
	 * Writes into a text file the output obtained
	 * from executing the queries in the local database.
	 * @param {*} data 
	 */
	const log = async ( data, file ) => {
		let dataString = JSON.stringify( data, null, 4 )
		fs.writeFile( file, dataString, (error, result) => {
			if ( error ) console.error( error )
			console.log( result )
			console.log( 'Datos escritos con Ã©xito.' )
		} )
	}

	/**
	 * Sends a collection into the coloud
	 * @param {*} data 
	 */
	const sendData = async data => {
		try {
			const response = await axios.put( 'https://venka.app/api/datalive/', data, {
				headers: {
					'Accept': 'application/json',
					'Content-Type': 'text/json',
					'Authorization': 'Bearer 5|rWPvximC35rCs3UYTvadmJkI9Mz7S1spRgqyDFid'
				}
			} )
			await log( response.data, './last_response.log' )
			console.log( response.data )
		} catch ( error ) {
			console.error( error )
			process.exit()
		}
		
	}

	/**
	 * Executes all the queries and stores them in a collection
	 * @param {*} queries 
	 */
	const queryLocal = async queries => {
		let data = []

		console.log( 'Ejecutando consultas...' )

		const connection = await sql.connect( 'Server=MER01-SERVER\\NATIONALSOFT;Database=softrestaurant95pro;User Id=sa;Password=National09;Encrypt=false' )
		for ( const query of queries.data ) {
			const result = await connection.query( query.query )
			
			// Check if the current response's property name starts with 'XML_',
			// If so, convert it into JSON using xml2js.
			// Otherwise, pass it into the data array as is.
			console.log(result)
			if ( Object.keys( result.recordset[0] ).toString().startsWith( 'XML_' ) ) {
				let jsonValue = []
				// If value is not an XML, pass it empty, else: convert it to JSON
				if ( ! Object.values( result.recordset[0] ).toString().startsWith( '<' ) ) {
					data.push( { [query.name]: 0 } )
				} else {
					parseString( Object.values( result.recordset[0] ), ( error, result ) => {
						if ( error ) {
							console.error( error )
							process.exit()
						}
						// Cleanup the nesting mess generated by xml2js.
						let nested1 = result[ Object.keys( result )[0] ]
						let nested2 = nested1[ Object.keys( nested1 )[0] ]
						let nested3 = nested2[ Object.keys( nested2 )[0] ]
						let nested4 = nested3[ Object.keys( nested3 )[0] ]
						console.log( nested4 )
						jsonValue = [nested4]
					} )
					data.push( { [query.name]: jsonValue } )
				}
			} else {
				console.log( result.recordset[0] )
				data.push( result.recordset[0] )
			}

		}

		console.log( 'Consultas ejecutadas, escribiendo datos...' )
		let addedSucursal = [ { id_sucursal: 40 }, ...data ]
		return addedSucursal
	}

	
	// Obtain queries
	try {
		console.log( 'Obteniendo consultas...' )

		const response = await axios.get( 'https://venka.app/api/queries/1', { headers: {
			'Content-type': 'application/json',
			'Authorization': 'Bearer 5|rWPvximC35rCs3UYTvadmJkI9Mz7S1spRgqyDFid',
		} } )

		console.log( 'Consultas obtenidas.' )

		const obtainedQueries = await response
		const queriesResponse = await queryLocal( obtainedQueries )
		await log( queriesResponse, './last_output.log' )
		await sendData( queriesResponse )
		//await log( queryLocal( await response ) )
		//await log( responseData )
		
	} catch ( error ) {
		console.log(error)
		process.exit()
	}

	

	
}

main()